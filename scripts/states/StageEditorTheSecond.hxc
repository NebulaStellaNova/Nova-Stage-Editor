import funkin.ui.MusicBeatState;

import haxe.ui.RuntimeComponentBuilder;

import haxe.ui.core.Screen;
import haxe.ui.core.Component;
import haxe.ui.core.TextDisplay;

import haxe.ui.components.Label;
import haxe.ui.components.Button;
import haxe.ui.components.TabBar;
import haxe.ui.components.Column;
import haxe.ui.components.DropDown;
import haxe.ui.components.TextArea;
import haxe.ui.components.CheckBox;
import haxe.ui.components.TextField;
import haxe.ui.components.NumberStepper;

import haxe.ui.containers.Box;
import haxe.ui.containers.HBox;
import haxe.ui.containers.VBox;
import haxe.ui.containers.Header;
import haxe.ui.containers.TabView;
import haxe.ui.containers.ListView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.ScrollView;
import haxe.ui.containers.HorizontalSplitter;

import haxe.ui.containers.menus.Menu;
import haxe.ui.containers.menus.MenuBar;
import haxe.ui.containers.menus.MenuItem;
import haxe.ui.containers.menus.MenuCheckBox;
import haxe.ui.containers.menus.MenuOptionBox;
import haxe.ui.containers.menus.MenuSeparator;

import haxe.ui.containers.dialogs.Dialog;

import haxe.ui.containers.windows.Window;
import haxe.ui.containers.windows.WindowManager;

import haxe.ui.data.ArrayDataSource;

import haxe.ui.macros.ComponentMacros;

import funkin.input.Cursor;

import funkin.ui.debug.charting.ChartEditorState;
import funkin.ui.mainmenu.MainMenuState;

import flixel.FlxG;

import haxe.ui.notifications.NotificationManager;
import haxe.ui.notifications.NotificationType;

import funkin.graphics.FunkinSprite;

import flixel.addons.display.shapes.FlxShapeCircle;
import flixel.addons.display.shapes.FlxShapeBox;
import flixel.addons.effects.chainable.FlxOutlineEffect;
import flixel.addons.effects.chainable.FlxEffectSprite;

import haxe.ui.events.MouseEvent;

class StageEditorTheSecond extends MusicBeatState {

    var notificationManager = new NotificationManager();
	var windowManager = new WindowManager();

    var targetSprite:FunkinSprite = null;

    var transformSprites = {
        centerCircle: null,
        rightCircle: null,
        outline: null
    }

    var editPropWindow;
    var saveAsComponent;

    function new() {
        super('StageEditorTheSecond');
    }

    function create() {
        super.create();
        Cursor.show();
		var chartEditor = new ChartEditorState();

        var bg = new FunkinSprite(0, 0).loadGraphic(Paths.image('menuDesat'));
		bg.scrollFactor.set(0, 0);
		bg.setGraphicSize(FlxG.width, FlxG.height);
		bg.updateHitbox();
		bg.screenCenter();
		bg.alpha = 0.25;
		// bg.cameras = [camBackground];
		add(bg);

        /* var iconTest = new FunkinSprite(0, 100).loadGraphic(Paths.image("icons/icon-bf"));
        add(iconTest);
        targetSprite = iconTest;

        var outline:FlxShapeBox = new FlxShapeBox(targetSprite.x, targetSprite.y, targetSprite.width, targetSprite.height, {
            thickness: 2,
            color: 0xFFFFFFFF
        }, 0x00000000); // Green filled circle
        transformSprites.outline = outline;
        add(outline);

        var circle:FlxShapeCircle = new FlxShapeCircle(100, 100, 7.5, {
            thickness: 2,
            color: 0xFFFFFFFF
        }, 0x88000000); // Green filled circle
        transformSprites.centerCircle = circle;
        add(circle);

        var circle:FlxShapeCircle = new FlxShapeCircle(100, 100, 7.5, {
            thickness: 2,
            color: 0xFFFFFFFF
        }, 0x88000000); // Green filled circle
        transformSprites.rightCircle = circle;
        add(circle); */

        var menuBar = RuntimeComponentBuilder.build(Paths.ui("stage-editor/menubar"));
        add(menuBar);

        var exitToMenuItem = menuBar.findComponent("exitToMenu");
        exitToMenuItem.onClick = ()->{
            FlxG.switchState(new MainMenuState());
            //PolymodHandler.forceReloadAssets();
		}

        saveAsComponent = menuBar.findComponent("saveStageAs");
        bind(saveAsComponent, MouseEvent.CLICK, test);

        var saveStageComponent = menuBar.findComponent("saveStage");
        saveStageComponent.onClick = ()->{ 
            /* newNotification("New Update!", "A new update has been found!!", NotificationType.Warning, 3000, [
                { 
                    text: "Open Gamebanana", 
                    callback: ()->{
                        trace("Yo ??");
                    } 
                },
                { 
                    text: "Download and Install", 
                    callback: ()->{
                        trace("Yo ??");
                    } 
                }
            ]); */
		}

        var stageDataWindow = RuntimeComponentBuilder.build(Paths.ui("stage-editor/windows/stageDataWindow"));
        stageDataWindow.screenCenter();
        stageDataWindow.windowManager = windowManager;
        add(stageDataWindow);

        stageDataWindow.title = "Stage Data";
        stageDataWindow.x = FlxG.width - stageDataWindow.width - 10;
        stageDataWindow.y = menuBar.height + 10;
        
        editPropWindow = RuntimeComponentBuilder.build(Paths.ui("stage-editor/windows/editPropWindow"));
        editPropWindow.windowManager = windowManager;
        add(editPropWindow);

        initNotification();

    }

    var targetSpriteY = 0;

    function update() {
        super.update();        
        get_conductorInUse().update();

        editPropWindow.screenCenter();

        if (targetSprite != null) {

            transformSprites.rightCircle.x += FlxG.mouse.deltaX;
            transformSprites.rightCircle.y += FlxG.mouse.deltaY;
            
            transformSprites.centerCircle.x += FlxG.mouse.deltaX;
            transformSprites.centerCircle.y += FlxG.mouse.deltaY;
            if (FlxG.mouse.overlaps(transformSprites.centerCircle) && FlxG.mouse.pressed) {
                targetSprite.x += FlxG.mouse.deltaX;
                targetSprite.y += FlxG.mouse.deltaY;
            }

            if (FlxG.mouse.overlaps(transformSprites.rightCircle) && FlxG.mouse.justPressed) {
                targetSpriteY = targetSprite.y + targetSprite.height;
            }
            
            if (FlxG.mouse.overlaps(transformSprites.rightCircle) && FlxG.mouse.pressed) {
                targetSprite.scale.x += FlxG.mouse.deltaX/300;
                targetSprite.scale.y -= FlxG.mouse.deltaY/150;
                targetSprite.y = targetSpriteY - targetSprite.height;
            }
            targetSprite.updateHitbox();

            transformSprites.centerCircle.x = targetSprite.x + (targetSprite.width/2) - (transformSprites.centerCircle.width/2);
            transformSprites.centerCircle.y = targetSprite.y + (targetSprite.height/2) - (transformSprites.centerCircle.height/2);

            transformSprites.outline.scale.x = targetSprite.scale.x;
            transformSprites.outline.scale.y = targetSprite.scale.y;

            transformSprites.outline.x = targetSprite.x;
            transformSprites.outline.y = targetSprite.y;

            transformSprites.outline.updateHitbox();


            transformSprites.rightCircle.x = targetSprite.x + targetSprite.width - (transformSprites.rightCircle.width/2);
            transformSprites.rightCircle.y = targetSprite.y - (transformSprites.rightCircle.height/2);
        }

        if (FlxG.mouse.justPressed) {
            FlxG.sound.play(Paths.sound("click"));
        }
    }

    override function beatHit() {
        super.beatHit();
        var curBeat = get_conductorInUse().currentBeat;
    }
    override function stepHit() {
        super.stepHit();
        var curStep = get_conductorInUse().currentStep;
    }

    function destroy() {
        super.destroy();
        Cursor.hide();
    }

    public function test() {
        FlxG.switchState(new MainMenuState());
    }

    function newNotification(title:String, body:String, ?type, ?expiryMs, ?actions) {
        notificationManager.addNotification({
            title: title,
            body: body,
            type: type ?? NotificationType.Default,
            expiryMs: expiryMs ?? null,
            actions: actions ?? []
        });
    }

    function initNotification() {
        notificationManager.addNotification({
            title: "Welcome!",
            body: "Welcome to the Nova Stage Editor! Press F1 for a user guide.",
            type: NotificationType.Default
        });
    }

    public function test2() {
        NotificationManager.instance.addNotification({
            title: "Test",
            body: "This is a test"
        });
    }

    function bind(component, mouseEvent, func) {
        switch (mouseEvent) {
            case MouseEvent.CLICK:
                component.onClick = func;
        }
    }
}